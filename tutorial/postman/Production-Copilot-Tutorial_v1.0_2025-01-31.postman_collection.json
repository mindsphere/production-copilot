{
	"info": {
		"_postman_id": "5e09ca60-81cf-4a31-981e-f50fa9142d1d",
		"name": "Production Copilot Tutorial v1.0 2025-01-31",
		"description": "This collection allows to manage the custom copilots in Insights Hub. Custom copilots (Assistants) with custom skills (tools) can be created.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tools (Skills)",
			"item": [
				{
					"name": "Get Tools",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tool By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<your-tool-id>"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: GetPlantStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"getPlantStatus\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Gets the current status of the plant, as input for further analysis. The status comprises the operating state for the critical machines and equipment in the format machine-name: machine-state. e.g. stencilprinter: error, smt-machine: warning\",\r\n    \"parameters\": [],\r\n    \"required\": [],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-get-plant-status>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: GetEvents",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"getEvents\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Gets the recent events of the plant as a list of texts. Each list entry has a timestamp, severity, title, description. The title refers to the asset that was the source of the event. Events provide information about historical issues or problems with machines in the plant and can help to find solutions to current problems. You must ALWAYS summarize these events and avoid duplicate entries.\",\r\n    \"parameters\": [],\r\n    \"required\": [],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-get-events>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: GetCases",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"getCases\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Returns the cases history as a list of texts, with datetime, title, description, type for each entry. Cases contain knowledge about existing problems in the plant and can help to find solutions to current problems\",\r\n    \"parameters\": [],\r\n    \"required\": [],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-get-cases>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: GetEnergyCost",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"GetEnergyCost\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Returns the current energy cost in EUR / MWh\",\r\n    \"parameters\": [],\r\n    \"required\": [],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-get-energy-cost>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: CreateNewCase",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"createNewCase\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Create a new case based on the provided title and description\",\r\n    \"parameters\":[\r\n        {\r\n            \"name\": \"title\",\r\n            \"type\": \"string\",\r\n            \"description\": \"The title of the case as string. \",\r\n            \"parameterUsage\": \"query\"\r\n        }, \r\n        {\r\n            \"name\": \"description\",\r\n            \"type\": \"string\",\r\n            \"description\": \"The description of the case as string. \",\r\n            \"parameterUsage\": \"query\"\r\n        }], \r\n    \"required\": [\r\n        \"title\"\r\n    ],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-create-new-case>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Tool: CreateCase_proposal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"createCaseProposal\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Helps the user to create a new case with information about the current problem, so that the maintenance team can act on the issues. Suggests a title and short summary description based on the current situation. Then asks the user for confirmation. After user confirmation, use the createNewCase function to save the data in the system.\",\r\n    \"parameters\":[], \r\n    \"required\": [],\r\n    \"endpoint\": \"<your-endpoint-in-vfc-to-create-a-new-case-proposal>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Tool By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"GetEnergyCost\",\r\n    \"callMethod\": \"get\",\r\n    \"description\": \"Returns the current energy cost in EUR / MWh\",\r\n    \"parameters\": [],\r\n    \"required\": [],\r\n    \"endpoint\": \"<your-url-in-vfc-to-get-energy-cost>\",\r\n    \"type\": \"external\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "be120e7c-3764-4bfd-8212-61b38f8adbb4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tool By Id - attention -",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/tools/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								"tools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "attention..."
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Assistants (Copilots)",
			"item": [
				{
					"name": "Get Assistants",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assistant By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<your-copilot-id>"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Assistant",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Shopfloor Snapshot\",\r\n    \"toolIds\": [\r\n        \"<your-skill-id-1>\",\r\n        \"<your-skill-id-2>\",\r\n        \"<your-skill-id-3>\",\r\n        \"<your-skill-id-4>\",\r\n        \"<your-skill-id-5>\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Assistant By Id (see Scripts section)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const instructions =  \r",
									"\"You are an assistant tasked with helping the user to understand the situation on the shopfloor, and help where possible.\\n\\n\" +\r",
									"\"**General instructions:**\\n\" +\r",
									"\"- ALWAYS summarize events and cases, avoid duplicate entries\" +\r",
									"\"- When you use the function 'getEventData' summarize based on the description. Ignore the timestamps. The user should not see the same description several times. Only if the user asks for a list of events, provide all data without summarizing.\\n\" +\r",
									"\"- For each question, ALWAYS trigger new tool calls, do NOT use cached data.\" +\r",
									"\"**Specific instructions:**\\n\" +\r",
									"\"- When the user asks questions about the status of the plant or current problems, or recommendations follow these instructions:\\n\" +\r",
									"\"  1. Get the current status of the plant, get event data, get case data\\n\" +\r",
									"\"  2. Provide a response to the user in the following format:\\n\" +\r",
									"\"    - *Current status*. Here, list the plant status.\\n\" +\r",
									"\"    - *Recent events*. Here, list a summary of recent events.\\n\" +\r",
									"\"    - *Recommendations*. Here, check if any case data matches to recent events the the machine states. Then, if possible, provide a recommendation to solve the current problem. Make sure to mention ONLY cases that are related to current machines in ERROR state. If you are not sure, say 'There are no recommendations for the current situation'.\\n\" +\r",
									"\"    - *Reference Data*. If there was a recommendation summarize historical events and cases that were used to create it. If there is no recommedation, or if there are no related cases or events leave away this section.\" \r",
									"\r",
									"pm.collectionVariables.set(\"instructions\", JSON.stringify(instructions));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"name\": \"Shopfloor Snapshot\",\r\n    \"instructions\": {{instructions}},\r\n    \"owner\": \"admin\",\r\n    \"toolIds\": [\r\n        \"6f0b415d-3238-4115-88fa-ececc9977416\",\r\n        \"d1238a24-a46a-479a-99f3-06581f3f7a7f\",\r\n        \"9511a3d5-5dc8-4687-b662-0d513e2a8182\",\r\n        \"be120e7c-3764-4bfd-8212-61b38f8adbb4\",\r\n        \"3afe6bb9-8db7-4d20-95a2-7e9d1e9482f1\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<your-assistant-id>"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Assistant By Id - attention -",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{assistant_server_url}}/openai/assistant/:id",
							"host": [
								"{{assistant_server_url}}"
							],
							"path": [
								"openai",
								"assistant",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "attention..."
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get api version",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{assistant_server_url}}/version",
					"host": [
						"{{assistant_server_url}}"
					],
					"path": [
						"version"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"session_var = pm.variables.get(\"session\");",
					"xsrf_token_var = pm.variables.get(\"xsrf_token\");",
					"",
					"pm.request.headers.add({key: 'X-XSRF-TOKEN', value: xsrf_token_var });",
					"pm.request.headers.add({key: 'Cookie', value: \"SESSION=\" + session_var + \"; XSRF-TOKEN=\" + xsrf_token_var });",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "assistant_server_url",
			"value": "https://<yourTenant>-operationsinsight.eu1.mindsphere.io/api/assistant/v3",
			"type": "default"
		},
		{
			"key": "session",
			"value": "your-session-id",
			"type": "default"
		},
		{
			"key": "xsrf_token",
			"value": "your-xsrf-token",
			"type": "default"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "instructions",
			"value": ""
		}
	]
}